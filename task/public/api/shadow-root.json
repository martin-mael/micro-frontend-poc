[
    {
        "name": "Create and inject shadow root plugin",
        "description": "### Create src/plugins/injectShadowRoot.ts\n```typescript\nimport type { Plugin } from 'vite';\n\nconst injectShadowRootPlugin = (): Plugin => {\n  const virtualModuleId = 'virtual:shadow-root';\n  const resolvedVirtualModuleId = '\\0' + virtualModuleId;\n\n  return {\n    name: 'inject-shadow-root',\n    resolveId(id) {\n      if (id === virtualModuleId) return resolvedVirtualModuleId;\n    },\n    load(id) {\n      if (id === resolvedVirtualModuleId) {\n        return `\n          const shadowRoots = new Map();\n          \n          export function setShadowRoot(instanceId, root) {\n            shadowRoots.set(instanceId, root);\n          }\n          \n          export function useShadowRoot(instanceId) {\n            return shadowRoots.get(instanceId);\n          }\n\n          export function cleanupShadowRoot(instanceId) {\n            shadowRoots.delete(instanceId);\n          }\n        `;\n      }\n    }\n  };\n};\n\nexport default injectShadowRootPlugin;\n```\n### Use it into vite.config.ts\n```typescript\nimport { defineConfig, UserConfig } from 'vite';\nimport react from '@vitejs/plugin-react-swc';\nimport webcomponentPlugin from './src/plugins/webComponentPlugin';\nimport injectShadowRootPlugin from './src/plugins/injectShadowRoot';\n\nconst WEB_COMPONENT_CONFIG = {\n  script: '/src/TaskWebComponent.tsx',\n  webComponent: '<task-web-component route-basename=\"/\" api-baseurl=\"http://localhost:5173/api\"></task-web-component>'\n};\n\nconst getWebComponentConfig = (): Partial<UserConfig> => ({\n  plugins: [\n    webcomponentPlugin(WEB_COMPONENT_CONFIG),\n    injectShadowRootPlugin(),\n  ],\n  build: {\n    lib: {\n      entry: 'src/TaskWebComponent.tsx',\n      formats: ['es'],\n      fileName: 'task-web-component'\n    },\n    minify: 'esbuild',\n    sourcemap: true,\n    rollupOptions: {\n      output: {\n        inlineDynamicImports: false,\n        manualChunks: {\n          'react-vendor': ['react', 'react-dom'],\n          'router-vendor': ['react-router-dom'],\n          'markdown': ['react-markdown', 'rehype-highlight', 'remark-gfm']\n        }\n      }\n    }\n  }\n});\n\nconst getReactConfig = (): Partial<UserConfig> => ({\n  plugins: [\n    react(),\n    injectShadowRootPlugin(),\n  ]\n});\n\nexport default defineConfig(({ mode }) => ({\n  plugins: mode === 'web-component' \n    ? getWebComponentConfig().plugins \n    : getReactConfig().plugins,\n  define: {\n    'process.env': {\n      NODE_ENV: JSON.stringify(process.env.NODE_ENV || 'production')\n    }\n  },\n  build: mode === 'web-component' \n    ? getWebComponentConfig().build \n    : undefined,\n  server: {\n    open: true,\n  }\n}));\n```\n### Create a src/contexts/ShadowRootContext.ts\n```typescript\nimport { createContext, useContext } from 'react';\n\nexport const ShadowRootContext = createContext<string>('');\n\nexport function useShadowRootInstance() {\n  return useContext(ShadowRootContext);\n}\n```\n### Wrap the app with the context inside the web component in src/TaskWebComponent.tsx\n```typescript\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { App } from './App';\nimport { ShadowRootContext } from './contexts/ShadowRootContext';\nimport { setShadowRoot, cleanupShadowRoot } from 'virtual:shadow-root';\n\n\nclass TaskWebComponent extends HTMLElement {\n  private root: ReactDOM.Root | null = null;\n  private instanceId: string;\n\n  static get observedAttributes() {\n    return ['route-basename', 'api-baseurl'];\n  }\n\n  constructor() {\n    super();\n    this.instanceId = crypto.randomUUID();\n  }\n\n  connectedCallback() {\n    const mountPoint = document.createElement('div');\n    const shadow = this.attachShadow({ mode: 'open' });\n    setShadowRoot(this.instanceId, shadow);\n\n    shadow.appendChild(mountPoint);\n\n    this.root = ReactDOM.createRoot(mountPoint);\n    this.render();\n  }\n\n  disconnectedCallback() {\n    cleanupShadowRoot(this.instanceId);\n  }\n\n  attributeChangedCallback() {\n    this.render();\n  }\n\n  private render() {\n    const basename = this.getAttribute('route-basename') || '';\n    const apiBaseUrl = this.getAttribute('api-baseurl') || '';\n\n    this.root?.render(\n      <React.StrictMode>\n        <ShadowRootContext.Provider value={this.instanceId}>\n          <App \n            basename={basename} \n            apiBaseUrl={apiBaseUrl} \n          />\n        </ShadowRootContext.Provider>\n      </React.StrictMode>\n    );\n  }\n}\n\ncustomElements.define('task-web-component', TaskWebComponent);\n```",
        "done": true
    },
    {
        "name": "Adapt code that uses document functions to use the shadow root",
        "description": "Document selectors lookup only for the global DOM if you still use the global document variable. As your app is now scoped into a shadow root, you need to select within this shadow root.\n### For example in src/components/TaskList.tsx\n```typescript\nimport { useGetShadowRoot } from '../hooks/useShadowRoot';\n//...\nconst doc = useGetShadowRoot() ?? document;\n// ...\nconst details = doc.getElementById(`details-${index}`);\n```",
        "done": true
    }
]